#ifndef EventFilter_RPCRawToDigi_RPCTwinMuxRecord_icc
#define EventFilter_RPCRawToDigi_RPCTwinMuxRecord_icc

#include "EventFilter/RPCRawToDigi/interface/RPCTwinMuxRecord.h"

namespace rpctwinmux {

inline void Header::reset()
{
    record_[0] = 0x0;
    record_[1] = dt_bx_window_mask_ | rpc_bx_window_mask_ | ho_bx_window_mask_;
}

inline bool Header::hasDTBXWindow() const
{
    return (record_[1] & dt_bx_window_mask_) != dt_bx_window_mask_;
}

inline unsigned int Header::getDTBXWindow() const
{
    return (record_[1] & dt_bx_window_mask_) >> dt_bx_window_offset_;
}

inline bool Header::hasRPCBXWindow() const
{
    return (record_[1] & rpc_bx_window_mask_) != rpc_bx_window_mask_;
}

inline int Header::getRPCBXMin() const
{
    return -1 * int((record_[1] & rpc_bx_window_mask_) >> rpc_bx_window_offset_) / 5;
}

inline int Header::getRPCBXMax() const
{
    return int((record_[1] & rpc_bx_window_mask_) >> rpc_bx_window_offset_) % 5;
}

inline bool Header::hasHOBXWindow() const
{
    return (record_[1] & ho_bx_window_mask_) != ho_bx_window_mask_;
}

inline unsigned int Header::getHOBXWindow() const
{
    return (record_[1] & ho_bx_window_mask_) >> ho_bx_window_offset_;
}

inline void Header::setDTBXWindow(unsigned int bx_window)
{
    record_[1] &= ~dt_bx_window_mask_;
    record_[1] |= (((std::uint64_t)(bx_window) << dt_bx_window_offset_) & dt_bx_window_mask_);
}

inline void Header::setRPCBXWindow(int bx_min, int bx_max)
{
    std::uint64_t bx_window((bx_max - 4) + 5 * (bx_min - 4));
    record_[1] &= ~rpc_bx_window_mask_;
    record_[1] |= (((std::uint64_t)(bx_window) << rpc_bx_window_offset_) & rpc_bx_window_mask_);
}

inline void Header::setHOBXWindow(unsigned int bx_window)
{
    record_[1] &= ~ho_bx_window_mask_;
    record_[1] |= (((std::uint64_t)(bx_window) << ho_bx_window_offset_) & ho_bx_window_mask_);
}

inline unsigned int Record::getType(std::uint64_t const record)
{
    if ((record & rpc_first_identifier_mask_) == rpc_first_identifier_)
        return rpc_first_type_;
    if ((record & rpc_second_identifier_mask_) == rpc_second_identifier_)
        return rpc_second_type_;
    if ((record & error_identifier_mask_) == error_identifier_)
        return error_type_;
    return unknown_type_;
}

inline unsigned int Record::getType() const
{
    return getType(record_);
}

inline void Record::set(std::uint64_t const record)
{
    record_ = record;
}

inline void Record::reset()
{
    record_ = 0x0;
}

inline std::uint64_t const & Record::getRecord() const
{
    return record_;
}

inline void RPCLinkRecord::set(std::uint32_t const record)
{
    record_ = record;
}

inline void RPCLinkRecord::reset()
{
    record_ = da_mask_;
}

inline std::uint32_t const & RPCLinkRecord::getRecord() const
{
    return record_;
}

inline bool RPCLinkRecord::isAcknowledge() const
{
    return ((record_ & da_mask_) ? true : false);
}

inline bool RPCLinkRecord::isError() const
{
    return ((record_ & de_mask_) ? true : false);
}

inline bool RPCLinkRecord::isEOD() const
{
    return ((record_ & eod_mask_) ? true : false);
}

inline unsigned int RPCLinkRecord::getDelay() const
{
    return (record_ & delay_mask_) >> delay_offset_;
}

inline unsigned int RPCLinkRecord::getLinkBoard() const
{
    return (record_ & link_board_mask_) >> link_board_offset_;
}

inline unsigned int RPCLinkRecord::getConnector() const
{
    return (record_ & connector_mask_) >> connector_offset_;
}

inline unsigned int RPCLinkRecord::getPartition() const
{
    return (record_ & partition_mask_) >> partition_offset_;
}

inline std::uint8_t RPCLinkRecord::getPartitionData() const
{
    return (record_ & partition_data_mask_) >> partition_data_offset_;
}

inline void RPCLinkRecord::setAcknowledge(bool da)
{
    if (da)
        record_ |= da_mask_;
    else
        record_ &= ~(da_mask_);
}

inline void RPCLinkRecord::setError(bool de)
{
    if (de)
        record_ |= de_mask_;
    else
        record_ &= ~(de_mask_);
}

inline void RPCLinkRecord::setEOD(bool eod)
{
    if (eod)
        record_ |= eod_mask_;
    else
        record_ &= ~(eod_mask_);
}

inline void RPCLinkRecord::setDelay(unsigned int delay)
{
    record_ &= ~delay_mask_;
    record_ |= (((std::uint32_t)(delay) << delay_offset_) & delay_mask_);
}

inline void RPCLinkRecord::setLinkBoard(unsigned int link_board)
{
    record_ &= ~link_board_mask_;
    record_ |= (((std::uint32_t)(link_board) << link_board_offset_) & link_board_mask_);
}

inline void RPCLinkRecord::setConnector(unsigned int connector)
{
    record_ &= ~connector_mask_;
    record_ |= (((std::uint32_t)(connector) << connector_offset_) & connector_mask_);
}

inline void RPCLinkRecord::setPartition(unsigned int partition)
{
    record_ &= ~partition_mask_;
    record_ |= (((std::uint32_t)(partition) << partition_offset_) & partition_mask_);
}

inline void RPCLinkRecord::setPartitionData(std::uint8_t data)
{
    record_ &= ~partition_data_mask_;
    record_ |= (((std::uint32_t)(data) << partition_data_offset_) & partition_data_mask_);
}

inline void RPCBXRecord::set(std::uint8_t const record)
{
    record_ = record;
}

inline void RPCBXRecord::reset()
{
    record_ = 0x0;
}

inline std::uint8_t const & RPCBXRecord::getRecord() const
{
    return record_;
}

inline bool RPCBXRecord::isBC0() const
{
    return ((record_ & bc0_mask_) ? true : false);
}

inline unsigned int RPCBXRecord::getBXCounter() const
{
    return (record_ & bcn_mask_) >> bcn_offset_;
}

inline void RPCBXRecord::setBC0(bool bc0)
{
    if (bc0)
        record_ |= bc0_mask_;
    else
        record_ &= ~(bc0_mask_);
}

inline void RPCBXRecord::setBXCounter(unsigned int bcn)
{
    record_ &= ~bcn_mask_;
    record_ |= (((std::uint8_t)(bcn) << bcn_offset_) & bcn_mask_);
}

inline void RPCRecord::set(unsigned int nword, std::uint64_t const word)
{
    if (nword < 2)
        record_[nword] = word;
}

inline void RPCRecord::reset()
{
    record_[0] = Record::rpc_first_identifier_
        | ((std::uint64_t)RPCLinkRecord::da_mask_ << link_record_offset_[0])
        | ((std::uint64_t)RPCLinkRecord::da_mask_ << link_record_offset_[1]);
    record_[1] = Record::rpc_second_identifier_
        | ((std::uint64_t)RPCLinkRecord::da_mask_ << link_record_offset_[2])
        | ((std::uint64_t)RPCLinkRecord::da_mask_ << link_record_offset_[3])
        | ((std::uint64_t)RPCLinkRecord::da_mask_ << link_record_offset_[4]);
}

inline std::uint64_t const * RPCRecord::getRecord() const
{
    return record_;
}

inline int RPCRecord::getBXOffset() const
{
    return -4 + (int)((record_[0] & bx_offset_mask_) >> bx_offset_offset_);
}

inline bool RPCRecord::hasOverflow() const
{
    return ((record_[0] & overflow_mask_) ? true : false);
}

inline RPCBXRecord RPCRecord::getRPCBXRecord(unsigned int link) const
{
    RPCBXRecord bx_record;
    if (link < 5) {
        bx_record.set((record_[0] >> bx_record_offset_[link]) & bx_record_mask_);
    }
    return bx_record;
}

inline RPCLinkRecord RPCRecord::getRPCLinkRecord(unsigned int link) const
{
    RPCLinkRecord link_record;
    if (link < 5) {
        link_record.set((record_[link_record_word_[link]] >> link_record_offset_[link]) & link_record_mask_);
    }
    return link_record;
}

inline void RPCRecord::setBXOffset(int bx_offset)
{
    record_[0] &= ~bx_offset_mask_;
    record_[0] |= (((std::uint64_t)(bx_offset + 4) << bx_offset_offset_) & bx_offset_mask_);
}

inline void RPCRecord::setOverflow(bool overflow)
{
    if (overflow)
        record_[0] |= overflow_mask_;
    else
        record_[0] &= ~(overflow_mask_);
}

inline void RPCRecord::setRPCBXRecord(unsigned int link, RPCBXRecord const & bx_record)
{
    if (link < 5) {
        record_[0] &= ~(bx_record_mask_ << bx_record_offset_[link]);
        record_[0] |= (((std::uint64_t)bx_record.getRecord() & bx_record_mask_) << bx_record_offset_[link]);
    }
}

inline void RPCRecord::setRPCLinkRecord(unsigned int link, RPCLinkRecord const & link_record)
{
    if (link < 5) {
        record_[link_record_word_[link]] &= ~(link_record_mask_ << link_record_offset_[link]);
        record_[link_record_word_[link]] |= (((std::uint64_t)link_record.getRecord() & link_record_mask_) << link_record_offset_[link]);
    }
}

} // namespace rpctwinmux

#endif // EventFilter_RPCRawToDigi_RPCTwinMuxRecord_icc
